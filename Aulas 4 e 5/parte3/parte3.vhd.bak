library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity parte3 is
    Port (
        clk     : in  STD_LOGIC;   -- Clock de 50 MHz
        reset   : in  STD_LOGIC;   -- Reset para inicializar o contador
        seg     : out STD_LOGIC_VECTOR (6 downto 0)  -- Saída para o display de 7 segmentos
    );
end parte3;

architecture Behavioral of parte3 is
    -- Constantes
    constant COUNT_MAX : integer := 50000000; -- Contador para um segundo (50 MHz * 1 s)
    
    -- Sinais
    signal counter_1s : integer := 0;
    signal digit_counter : integer := 0;
    signal clk_1s : STD_LOGIC := '0';  -- Sinal de clock para 1 segundo
    
    -- Funções de conversão
    function int_to_7seg (d : integer) return STD_LOGIC_VECTOR is
    begin
        case d is
            when 0 => return "0000001"; -- Exemplo para o dígito 0
            when 1 => return "1001111"; -- Exemplo para o dígito 1
            when 2 => return "0010010"; -- Exemplo para o dígito 2
            when 3 => return "0000110"; -- Exemplo para o dígito 3
            when 4 => return "1001100"; -- Exemplo para o dígito 4
            when 5 => return "0100100"; -- Exemplo para o dígito 5
            when 6 => return "0100000"; -- Exemplo para o dígito 6
            when 7 => return "0001111"; -- Exemplo para o dígito 7
            when 8 => return "0000000"; -- Exemplo para o dígito 8
            when 9 => return "0000100"; -- Exemplo para o dígito 9
            when others => return "1111111"; -- Exibição padrão de erro
        end case;
    end function;

begin
    process(clk, reset)
    begin
        if reset = '1' then
            counter_1s <= 0;
            clk_1s <= '0';
            digit_counter <= 0;
        elsif rising_edge(clk) then
            -- Contador de 1 segundo
            if counter_1s = COUNT_MAX - 1 then
                counter_1s <= 0;
                clk_1s <= not clk_1s;
            else
                counter_1s <= counter_1s + 1;
            end if;
            
            -- Contador de dígitos
            if clk_1s = '1' then
                if digit_counter = 9 then
                    digit_counter <= 0;
                else
                    digit_counter <= digit_counter + 1;
                end if;
            end if;
        end if;
    end process;
    
    -- Saída para o display de 7 segmentos
    seg <= int_to_7seg(digit_counter);
end Behavioral;
